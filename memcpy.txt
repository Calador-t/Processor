li 1 r1         #0 	Initialize inc = 1 for the first loop
li 5 r2         #4 	Load the value 5 into r2 (to store in a[i])
li 9215 r3      #8 	Load the base address of array a into r3
li 128 r4       #c 	Set limit for the loop (128)
li 0 r5         #10 	Offset for array a
li 4 r6         #14 	Increment offset by 4 bytes for each iteration
add r3 r5 r7    #18	Compute address of a[i] (base + offset) into r7
stw r2 0 r7     #1c 	Store 5 into a[i]
add r5 r6 r5    #20 	Increment offset (r5 += 4)
add r1 r0 r0    #24 	Increment i (r0 += 1)
beq r0 48 r4   #28 	Exit loop if i == 128, jump to instr #30
jump r0 24      
li 0 r0         #30 	Reset i = 0
li 0 r5         #34 	Reset offset for array a
li 9215 r3      #38 	Base address of array a
li 10000 r10    #3c 	Base address of array b
add r3 r5 r7    #40 	Compute address of a[i] (base + offset) into r7
add r10 r5 r11  #44 	Compute address of b[i] (base + offset) into r11
ldw r7 0 r12    #48 	Load a[i] into r12
stw r12 0 r11   #4c 	Store r12 into b[i]
add r5 r6 r5    #50 	Increment offset for array a (r5 += 4)
add r1 r0 r0    #54 	Increment i (r1 += 1)
beq r0 400 r4 	#58 	Exit loop if i == 128
jump r0 68	
